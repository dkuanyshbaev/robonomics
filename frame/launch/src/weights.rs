//! Autogenerated weights for `robonomics_launch`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-05-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `11th Gen Intel(R) Core(TM) i5-1130G7 @ 1.10GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/dev-runtime/dev_runtime.wasm
// --pallet
// robonomics-launch
// --extrinsic
//
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions.
pub trait WeightInfo {
    fn launch() -> Weight;
}

/// Weight functions for `robonomics_launch`.
pub struct RobonomicsWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for RobonomicsWeight<T> {
	/// Storage: `Launch::Goal` (r:0 w:1)
	/// Proof: `Launch::Goal` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn launch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_822_000 picoseconds.
		Weight::from_parts(8_212_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
