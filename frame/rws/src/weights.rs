
//! Autogenerated weights for `robonomics_rws`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-05-23, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `11th Gen Intel(R) Core(TM) i5-1130G7 @ 1.10GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/dev-runtime/dev_runtime.wasm
// --pallet
// robonomics-rws
// --extrinsic
//
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions.
pub trait WeightInfo {
    fn bid() -> Weight;
    fn set_devices() -> Weight;
    fn set_oracle() -> Weight;
    fn set_subscription() -> Weight;
    fn start_auction() -> Weight;
}

/// Weight functions for `robonomics_rws`.
pub struct RobonomicsWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for RobonomicsWeight<T> {

// pub struct WeightInfo<T>(PhantomData<T>);
// impl<T: frame_system::Config> robonomics_rws::WeightInfo for WeightInfo<T> {
	/// Storage: `RWS::AuctionQueue` (r:1 w:0)
	/// Proof: `RWS::AuctionQueue` (`max_values`: Some(1), `max_size`: Some(402), added: 897, mode: `MaxEncodedLen`)
	/// Storage: `RWS::Auction` (r:1 w:1)
	/// Proof: `RWS::Auction` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `231`
		//  Estimated: `3593`
		// Minimum execution time: 36_709_000 picoseconds.
		Weight::from_parts(40_162_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `RWS::Devices` (r:0 w:1)
	/// Proof: `RWS::Devices` (`max_values`: None, `max_size`: Some(3242), added: 5717, mode: `MaxEncodedLen`)
	fn set_devices() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_639_000 picoseconds.
		Weight::from_parts(9_998_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `RWS::Oracle` (r:0 w:1)
	/// Proof: `RWS::Oracle` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_oracle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_130_000 picoseconds.
		Weight::from_parts(4_292_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `RWS::Oracle` (r:1 w:0)
	/// Proof: `RWS::Oracle` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `RWS::Ledger` (r:0 w:1)
	/// Proof: `RWS::Ledger` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	fn set_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `140`
		//  Estimated: `1517`
		// Minimum execution time: 16_744_000 picoseconds.
		Weight::from_parts(17_328_000, 0)
			.saturating_add(Weight::from_parts(0, 1517))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `RWS::AuctionNext` (r:1 w:1)
	/// Proof: `RWS::AuctionNext` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `RWS::AuctionQueue` (r:1 w:1)
	/// Proof: `RWS::AuctionQueue` (`max_values`: Some(1), `max_size`: Some(402), added: 897, mode: `MaxEncodedLen`)
	/// Storage: `RWS::Auction` (r:0 w:1)
	/// Proof: `RWS::Auction` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	fn start_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1887`
		// Minimum execution time: 15_059_000 picoseconds.
		Weight::from_parts(15_468_000, 0)
			.saturating_add(Weight::from_parts(0, 1887))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
